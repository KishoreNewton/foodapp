# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AllCategoriesOutput {
  categories: [Category!]
  error: String
  ok: Boolean!
}

type Category {
  coverImg: String
  createdAt: DateTime!
  id: Float!
  name: String!
  restaurantCount: Int!
  restaurants: [Restaurant!]
  slug: String!
  updatedAt: DateTime!
}

input CategoryInput {
  page: Int = 1
  slug: String!
}

type CategoryOutput {
  category: Category
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

input CreateDishInput {
  description: String!
  name: String!
  options: [DishOptionInputType!]
  price: Int!
  restaurantId: Int!
}

type CreateDishOutput {
  error: String
  ok: Boolean!
}

input CreateRestaurantInput {
  address: String = "address"
  categroyName: String!
  coverImg: String!
  name: String!
}

type CreateRestaurantOutput {
  error: String
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteDishInput {
  dishId: Int!
}

type DeleteDishOutput {
  error: String
  ok: Boolean!
}

input DeleteRestaurantInput {
  address: String = "address"
  categroyName: String
  coverImg: String
  name: String
  restaurantId: Float!
}

type DeleteRestaurantOutput {
  error: String
  ok: Boolean!
}

type Dish {
  createdAt: DateTime!
  description: String!
  id: Float!
  name: String!
  options: [DishOption!]
  photo: String
  price: Int!
  restaurant: Restaurant!
  updatedAt: DateTime!
}

type DishChoice {
  extra: Int
  name: String!
}

input DishChoiceInputType {
  extra: Int
  name: String!
}

type DishOption {
  choices: [DishChoice!]
  extra: Int
  name: String!
}

input DishOptionInputType {
  choices: [DishChoiceInputType!]
  extra: Int
  name: String!
}

input EditDishInput {
  description: String
  dishId: Int!
  name: String
  options: [DishOptionInputType!]
  price: Int
}

type EditDishOutput {
  error: String
  ok: Boolean!
}

input EditProfileInput {
  email: String
  password: String
}

type EditProfileOutput {
  error: String
  ok: Boolean!
}

input EditRestaurantInput {
  address: String = "address"
  categroyName: String
  coverImg: String
  name: String
  restaurantId: Float!
}

type EditRestaurantOutput {
  error: String
  ok: Boolean!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurantOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  editDish(input: EditDishInput!): EditDishOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  login(input: LoginInput!): LoginOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
}

type Query {
  allCategories: AllCategoriesOutput!
  category(input: CategoryInput!): CategoryOutput!
  hi: Boolean!
  me: User!
  restaurant(input: RestaurantInput!): RestaurantOutput!
  restaurants(input: RestaurantsInput!): RestaurantsOutput!
  searchRestaurant(input: SearchRestaurantInput!): SearchRestaurantOutput!
  userProfile(userId: Float!): UserProfileOutput!
}

type Restaurant {
  address: String!
  category: Category
  coverImg: String!
  createdAt: DateTime!
  id: Float!
  isPromoted: Boolean!
  menu: [Dish!]!
  name: String!
  owner: User!
  promotedUntil: DateTime
  updatedAt: DateTime!
}

input RestaurantInput {
  restaurantId: Int!
}

type RestaurantOutput {
  error: String
  ok: Boolean!
  restaurant: Restaurant
}

input RestaurantsInput {
  page: Int = 1
}

type RestaurantsOutput {
  error: String
  ok: Boolean!
  results: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

input SearchRestaurantInput {
  page: Int = 1
  query: String!
}

type SearchRestaurantOutput {
  error: String
  ok: Boolean!
  restaurants: [Restaurant!]
  totalPages: Int
  totalResults: Int
}

type User {
  createdAt: DateTime!
  email: String!
  id: Float!
  password: String!
  restaurants: [Restaurant!]!
  role: UserRole!
  updatedAt: DateTime!
  verified: Boolean!
}

type UserProfileOutput {
  error: String
  ok: Boolean!
  user: User
}

enum UserRole {
  Client
  Delivery
  Owner
}

input VerifyEmailInput {
  code: String!
}

type VerifyEmailOutput {
  error: String
  ok: Boolean!
}
